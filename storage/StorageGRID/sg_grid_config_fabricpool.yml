---
- name: 'StorageGRID: Configure Fabric Pool'
  hosts: localhost
  gather_facts: no
  collections:
  - netapp.storagegrid
  vars_files:
  - vars_sg.yml
  vars:
    grid_auth: &grid_auth
      api_url:                 "{{ grid_admin_base_url }}"
      auth_token:              "{{ auth_response.json.data }}"
      validate_certs:          false
    tenant_auth: &tenant_auth
      api_url:                  "{{ grid_admin_base_url }}"
      auth_token:               "{{ tenant_auth_response.json.data }}"
      validate_certs:           false

  tasks:

  ###
  # GRID Authorization
  - name: Get GRID authorization token
    uri:
      url:                     "{{ grid_admin_base_url }}/api/v3/authorize"
      method:                  POST
      validate_certs:          false
      body_format:             json
      body: {
        "username":            "{{ grid_admin_username }}",
        "password":            "{{ grid_admin_password }}",
        "cookie":              false,
        "csrfToken":           false
      }
    register: auth_response

  ###
  # Create Tenant
  - name: Create a GRID tenant
    na_sg_grid_account:
      <<: *grid_auth

      state:                   present
      name:                    "{{ tenant.group_name }}"
      protocol:                s3
      management:              true
      use_own_identity_source: false
      allow_platform_services: false
      password:                "{{ tenant.root_passwd }}"
      update_password:         on_create
      # quota_size:              "{{ (DEFAULT_QUOTA | int ) * ( 1000 | pow(3) ) | int }}"
      # quota_size_unit:         bytes

    no_log: false
    register: fp_account_results

  ###
  # GET tenant info with grid_info

  # - name: Get Grid Tenants
  #   netapp.storagegrid.na_sg_grid_info:
  #     gather_subset: grid_accounts_info
  #     <<: *input_grid
  #   register: grid_tenants

  # - name: Get tenant by name
  #   set_fact:
  #     selected_tenant: "{{ grid_tenants.sg_info['grid/accounts'].data |
  #                       selectattr('name', 'equalto', TENANT) |
  #                       list }}"

  # - name: Check for unique tenant
  #   fail:
  #     msg: "Unique tenant ID for given name '{{ TENANT }}' not found"
  #   when:
  #     ( selected_tenant | length ) != 1

  ###
  # GET tenant infor by API

  - name: GET Tenant AUTH token
    uri:
      url:                     "{{ grid_admin_base_url }}/api/v3/authorize"
      method:                  POST
      validate_certs:          false
      body_format:             json
      body: {
        "accountId":           "{{ fp_account_results.resp.id }}",
        "username":            "{{ tenant.root_username }}",
        "password":            "{{ tenant.root_passwd }}",
        "cookie":              false,
        "csrfToken":           false
      }
    register: tenant_auth_response

  - name: Create Tenant group for Fabric Pool
    na_sg_org_group:
      <<: *tenant_auth

      state:                       present
      display_name:                "{{ tenant.group_name }}"
      unique_name:                 "group/{{ tenant.group_name }}"
      management_policy:
        manage_all_containers:     true
        manage_endpoints:          true
        manage_own_s3_credentials: false
        root_access:               false
      s3_policy:
        Statement:
        - Effect: Allow
          Action: s3:*
          Resource: arn:aws:s3:::*

  - name: Create Tenant Users
    netapp.storagegrid.na_sg_org_user:
      <<: *tenant_auth

      state: present

      # full_name:            "{{ item }}"
      # # unique_user_name:     "{{ item }}"
      # unique_name:          "user/{{ item }}"
      full_name:            "sandbox"
      unique_name:          "user/sandbox"
      member_of:            "group/{{ tenant.group_name }}"
      password:             "{{ tenant.users_passwd }}"
      # update_password:        on_create
      # disable: false

    with_items: "{{ tenant.users }}"
    no_log: false

  - name: Create an S3 key for FP Tenant Users
    na_sg_org_user_s3_key:
      <<: *tenant_auth

      state: present
      unique_name:        "user/{{ item }}"

    with_items: "{{ tenant.users }}"
    register: s3_cred

  - name: Check folder for storing credentials
    stat:
      path:               "../../files/s3_keys/{{ tenant.group_name }}"
    register: s3cred_folder

  - name: Create directory if it does not exist
    file:
      path:               "../../files/s3_keys{{ tenant.group_name }}"
      state:              directory

    when:
      not s3cred_folder.stat.exists

  - name: Write credentials to file
    copy:
      content:            "{{ s3_cred.resp }}"
      dest:               "../../files/s3_keys/{{ tenant.group_name }}/{{ item }}"

    with_items: "{{ tenant.users }}"

  - name: Create a S3 bucket for each User
    na_sg_org_container:
      <<: *tenant_auth

      state: present
      name:               "{{ item }}-bucket1"

    with_items: "{{ tenant.users }}"

  - name: Print GRID response
    debug:
      msg:
      - "{{ fabricpool_setup_results }}"